import React, { useEffect, useRef, useState } from "react";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
} from "chart.js";
import { Line } from "react-chartjs-2";
import zoomPlugin from "chartjs-plugin-zoom";
import CalenderChart from "./CalenderChart";
import "./styles.css"

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  zoomPlugin
);


function freezeAxis(scale) {
  scale.options.min = scale.min;
  scale.options.max = scale.max;
}

function unfreezeAxis(scale) {
  scale.options.min = null; // or infinite value, e.g., -1/0
  scale.options.max = null;
}

const zoomOptions = {
  pan: {
    enabled: true,
    mode: "x",
    onPanStart({ chart }) {
      console.log(chart);

      freezeAxis(chart.scales.y);
    },
    onPanComplete({ chart }) {
      unfreezeAxis(chart.scales.y);
    }
  },
  zoom: {
    wheel: {
      enabled: true
    },
    pinch: {
      enabled: true
    },
    mode: "x",
    onZoomStart({ chart }) {
      freezeAxis(chart.scales.y);
    },
    onZoomComplete({ chart }) {
      unfreezeAxis(chart.scales.y);
    }
  }
};

const options = {
  responsive: true,
  plugins: {
    legend: {
      position: "top"
    },
    title: {
      display: true,
      text: "Chart ESP32"
    },
    zoom: zoomOptions
  }
};


const Chart = ({data_json}) =>{
  const chartRef = useRef(null);
  // const [times, setTimes] = useState([]);
  // const [values, setValues] = useState([]);
  const [datas, setDatas]= useState({})
  const [query,setQuery] = useState([new Date(), new Date()])

  useEffect(()=>{
    const dateFrom = moment(query[0]).format("DD/MM/YYYY").toString();
    const dateTo = moment(query[1]).format("DD/MM/YYYY").toString();

    const timesArray = []
    const valuesArray = [];
    const foundDate = data_json.filter(item => item.date === dateFrom)[0]
    console.log(foundDate)

    foundDate.data.forEach(item => {
      timesArray.push(item.time);
      valuesArray.push(item.value);
    });    
    const labels = timesArray;
    const data = {
      labels,
      datasets: [
        {
          label: "Phim con heo",
          data: valuesArray,
          borderColor: "rgb(33, 150, 243)",
          backgroundColor: "rgba(33, 150, 243, 0.5)"
        },
      ]
    };
    setDatas(data);

  
  },[query])

  return (
    <div className="Chart">
      {Object.keys(datas).length 
      && (
      <div style={{ width: "50%"}} className="container">
        <CalenderChart setQuery={setQuery}></CalenderChart>
        <Line ref={chartRef} options={options} data={datas} />
      </div>
    )}
    </div>
  );
}

export default Chart
