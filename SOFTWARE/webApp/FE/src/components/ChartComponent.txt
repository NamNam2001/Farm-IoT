import React, { useEffect, useState } from "react";
import DateRangePicker from 'rsuite/DateRangePicker';
import ReactECharts from 'echarts-for-react';
import * as echarts from 'echarts';
import "./styles.css"
import '../../node_modules/rsuite/DateRangePicker/styles/index.css';
import moment from "moment";
// import {Card} from "@mui/material"
// import { Chart } from "react-chartjs-2";

const test = [
    {
        id: 1,
        date: '05/05/2024',
        data: [
            {
                "time": "13:41:27",
                "value": 1
            },
            {
                "time": "13:41:32",
                "value": 1
            },
            {
                "time": "13:41:38",
                "value": 0
            },
            {
                "time": "13:41:43",
                "value": 0
            },
            {
                "time": "13:41:48",
                "value": 0
            },
            {
                "time": "13:41:53",
                "value": 1
            },
            {
                "time": "13:41:58",
                "value": 0
            },
            {
                "time": "13:42:03",
                "value": 1
            },
            {
                "time": "13:42:08",
                "value": 1
            },
            {
                "time": "13:42:14",
                "value": 1
            },
            {
                "time": "13:42:19",
                "value": 0
            },
            {
                "time": "13:42:24",
                "value": 1
            }
        ]
    },
    {
        id: 2,
        date: '05/04/2024',
        data: [
            {
                "time": "19:41:27",
                "value": 1
            },
            {
                "time": "19:41:32",
                "value": 1
            },
            {
                "time": "19:41:38",
                "value": 0
            },
            {
                "time": "19:41:43",
                "value": 0
            },
            {
                "time": "19:41:48",
                "value": 0
            },
            {
                "time": "19:41:53",
                "value": 1
            },
            {
                "time": "19:41:58",
                "value": 0
            },
            {
                "time": "19:42:03",
                "value": 1
            },
            {
                "time": "19:42:08",
                "value": 1
            },
            {
                "time": "19:42:14",
                "value": 1
            },
            {
                "time": "19:42:19",
                "value": 0
            },
            {
                "time": "19:42:24",
                "value": 1
            }
        ]
    }
]
var option;


let dataRaw = [
    ['2024-05-05 13:00',27],
    ['2024-05-05 14:00',12],
    ['2024-05-05 15:00',65],
    ['2024-05-05 16:00' ,87],
    ['2024-05-05 17:00',12],
    ['2024-05-05 18:00' ,90],
    ['2024-05-06 19:00',27],
    ['2024-05-06 20:00',12],
    ['2024-05-06 21:00',65],
    ['2024-05-06 22:00' ,87],
    ['2024-05-06 23:00',12],
    ['2024-05-07 00:00' ,90],
    ['2024-05-08 13:00',27],
    ['2024-05-08 14:00',12],
    ['2024-05-09 15:00',65],
    ['2024-05-10 16:00' ,87],
    ['2024-05-11 17:00',12],
    ['2024-05-11 18:00' ,90],
    ['2024-05-12 19:00',27],
    ['2024-05-14 20:00',12],
    ['2024-05-14 21:00',65],
    ['2024-05-15 22:00' ,87],
    ['2024-05-16 23:00',12],
    ['2024-05-27 00:00' ,90],
];

option = {
    title: {
      left: 'center',
      text: 'Chart'
    },
    legend: {
      top: 'bottom',
      data: ['Intention']
    },
    tooltip: {
      triggerOn: 'none',
      position: function (pt) {
        return [pt[0], 130];
      }
    },
    toolbox: {
      left: 'center',
      itemSize: 25,
      top: 55,
      feature: {
        dataZoom: {
          yAxisIndex: 'none'
        },
        restore: {}
      }
    },
    xAxis: {
      type: 'time',
      axisPointer: {
        value: '2016-10-7',
        snap: true,
        lineStyle: {
          color: '#7581BD',
          width: 2
        },
        label: {
          show: true,
          formatter: function (params) {
            return echarts.format.formatTime('yyyy-MM-dd', params.value);
          },
          backgroundColor: '#7581BD'
        },
        handle: {
          show: true,
          color: '#7581BD'
        }
      },
      splitLine: {
        show: false
      }
    },
    yAxis: {
      type: 'value',
      axisTick: {
        inside: true
      },
      splitLine: {
        show: false
      },
      axisLabel: {
        inside: true,
        formatter: '{value}\n'
      },
      z: 10
    },
    grid: {
      top: 110,
      left: 15,
      right: 15,
      height: 160
    },
    dataZoom: [
      {
        type: 'inside',
        throttle: 50
      }
    ],
    series: [
      {
        name: 'Fake Data',
        type: 'line',
        smooth: false,
        symbol: 'circle',
        symbolSize: 5,
        sampling: 'average',
        itemStyle: {
          color: '#0770FF'
        },
        stack: 'a',
        areaStyle: {
          color: new echarts.graphic.LinearGradient(0, 0, 0, 0, [
            {
              offset: 0,
              color: 'rgba(58,77,233,0.8)'
            },
            {
              offset: 1,
              color: 'rgba(58,77,233,0.3)'
            }
          ])
        },
        data: dataRaw
      },
     
    ]
  };

const ChartComponent = () => {
    const [data,setData] = useState([])
    const [query,setQuery] = useState([new Date(), new Date()])
    const [options,setOptions] = useState(option);
    useEffect(() => {
        const dateFrom = moment(query[0])
        const dateTo = moment(query[1])
        const newData = test.map((item => {
           const dateItem = moment(new Date(item.date))
           if(dateFrom.isSameOrAfter(dateItem,'day') && dateTo.isSameOrBefore(dateItem,'day')){
            return item.data.map((_item)=> {
                return [
                    item.date + ' ' + _item.time,
                    _item.value
                ]
              })
           } 
        }))
        const newOptions = {...options}
        newOptions.series[0].data = newData;
        setOptions(options)
        console.log(newOptions)
    }, [query])
    const eChartsRef = React.useRef(null );

if (eChartsRef && eChartsRef.current)
      eChartsRef.current?.getEchartsInstance().setOption(options);
    return (
        <div className="container">
            <DateRangePicker size="sm" onOk={(e) => setQuery(e)} />
            <ReactECharts option={options} ref={eChartsRef} style={{ height: 600 }} />
        </div>
    )

}

export default ChartComponent